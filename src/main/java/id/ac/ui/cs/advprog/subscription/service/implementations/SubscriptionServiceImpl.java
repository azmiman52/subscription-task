package id.ac.ui.cs.advprog.subscription.service.implementations;import id.ac.ui.cs.advprog.subscription.model.Subscription;import id.ac.ui.cs.advprog.subscription.repository.SubscriptionRepository;import id.ac.ui.cs.advprog.subscription.service.interfaces.SubscriptionService;import lombok.RequiredArgsConstructor;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import org.springframework.web.client.RestTemplate;import org.springframework.web.server.ResponseStatusException;import java.util.*;import java.util.logging.Logger;@Service@RequiredArgsConstructorpublic class SubscriptionServiceImpl implements SubscriptionService {    private static final Logger logger = Logger.getLogger(SubscriptionService.class.getName());    private final RestTemplate restTemplate;    private final SubscriptionRepository subscriptionRepository;    @Override    public ResponseEntity<List<Subscription>> getSubscriptions(){        try {            List<Subscription> subscriptions = subscriptionRepository.findAll();            return new ResponseEntity<>(subscriptions, HttpStatus.OK);        }        catch (ResponseStatusException e) {            System.out.println("Error retrieving books...");            throw new ResponseStatusException(e.getStatusCode(), e.getReason());        }    }    @Override    public    ResponseEntity<List<Subscription>> findAll() {        try {            return new ResponseEntity<>(subscriptionRepository.findAll(), HttpStatus.OK);        } catch (ResponseStatusException e) {            throw new ResponseStatusException(e.getStatusCode(), e.getReason());        }    }    @Override    public ResponseEntity<Subscription> getSubscriptionById(String subscriptionId) {        try {            Optional<Subscription> subscriptionOptional = subscriptionRepository.findById(subscriptionId);            if(subscriptionOptional.isEmpty()){                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Subscription with ID: " + subscriptionId + " not found");            }            return new ResponseEntity<>(subscriptionOptional.get(), HttpStatus.OK);        } catch (ResponseStatusException e) {            throw new ResponseStatusException(e.getStatusCode(), e.getReason());        }    }    @Override    public ResponseEntity<Subscription> createSubscription(Subscription subscription) {        try {            Optional<Subscription> subscriptionOptional = subscriptionRepository.findById(subscription.getSubscriptionID());            if(subscriptionOptional.isEmpty()){                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Subscription with ID: " + subscription.getSubscriptionID() + " is already exist");            }            subscriptionRepository.save(subscription);            return new ResponseEntity<>(subscription, HttpStatus.CREATED);        } catch (ResponseStatusException e) {            throw new ResponseStatusException(e.getStatusCode(), e.getReason());        }    }    @Override    public ResponseEntity<Subscription> updateSubscription(String subscriptionId, Subscription subscription) {        try {            Optional<Subscription> subscriptionOptional = subscriptionRepository.findById(subscriptionId);            if(subscriptionOptional.isEmpty()){                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Subscription with ID: " + subscriptionId + " not found");            }            subscriptionRepository.save(subscription);            return new ResponseEntity<>(subscriptionOptional.get(), HttpStatus.OK);        } catch (ResponseStatusException e) {            throw new ResponseStatusException(e.getStatusCode(), e.getReason());        }    }    @Override    public ResponseEntity<Subscription> deleteSubscriptionById(String subscriptionId) {        try {            Optional<Subscription> subscriptionOptional = subscriptionRepository.findById(subscriptionId);            if(subscriptionOptional.isEmpty()){                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Subscription with ID: " + subscriptionId + " not found");            }            subscriptionRepository.deleteById(subscriptionId);            return new ResponseEntity<>(subscriptionOptional.get(), HttpStatus.OK);        } catch (ResponseStatusException e) {            throw new ResponseStatusException(e.getStatusCode(), e.getReason());        }    }}