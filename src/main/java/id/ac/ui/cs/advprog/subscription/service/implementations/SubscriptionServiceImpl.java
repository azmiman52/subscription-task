package id.ac.ui.cs.advprog.subscription.service.implementations;import id.ac.ui.cs.advprog.subscription.domains.entities.Subscription;import id.ac.ui.cs.advprog.subscription.domains.models.responses.ResponseData;import id.ac.ui.cs.advprog.subscription.repository.SubscriptionRepository;import id.ac.ui.cs.advprog.subscription.service.interfaces.SubscriptionService;import lombok.RequiredArgsConstructor;import org.springframework.http.HttpStatus;import org.springframework.http.HttpStatusCode;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import org.springframework.web.client.RestTemplate;import org.springframework.web.server.ResponseStatusException;import java.util.*;import java.util.logging.Logger;@Service@RequiredArgsConstructorpublic class SubscriptionServiceImpl implements SubscriptionService {    private static final Logger logger = Logger.getLogger(SubscriptionService.class.getName());    private final RestTemplate restTemplate;    private final SubscriptionRepository subscriptionRepository;    @Override    public ResponseEntity<List<Subscription>> getSubscriptions(){        try {            return new ResponseEntity<>(subscriptionRepository.findAll(), HttpStatus.OK);        }        catch (ResponseStatusException e) {            throw new ResponseStatusException(e.getStatusCode(), e.getReason());        }    }    @Override    public    ResponseEntity<List<Subscription>> findAll() {        try {            return new ResponseEntity<>(subscriptionRepository.findAll(), HttpStatus.OK);        } catch (ResponseStatusException e) {            throw new ResponseStatusException(e.getStatusCode(), e.getReason());        }    }    @Override    public ResponseEntity<Subscription> getSubscriptionById(String subscription_id) {        try {            Optional<Subscription> subscriptionOptional = subscriptionRepository.findById(subscription_id);            if(subscriptionOptional.isEmpty()){                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Subscription with ID: " + subscription_id + " not found");            }            return new ResponseEntity<>(subscriptionOptional.get(), HttpStatus.OK);        } catch (ResponseStatusException e) {            throw new ResponseStatusException(e.getStatusCode(), e.getReason());        }    }    @Override    public ResponseEntity<Subscription> createSubscription(Subscription subscription) {        try {            Optional<Subscription> subscriptionOptional = subscriptionRepository.findById(subscription.getId());            if(subscriptionOptional.isEmpty()){                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Subscription with ID: " + subscription.getId() + " is already exist");            }            UUID uuid = UUID.randomUUID();            switch (subscription.getType()){                case MONTHLY -> subscription.setId("MTH-"+ uuid);                case QUARTERLY -> subscription.setId("QTR-"+ uuid);                case SEMI_ANNUAL -> subscription.setId("SAA-"+ uuid);            }            subscriptionRepository.save(subscription);            return new ResponseEntity<>(subscription, HttpStatus.OK);        } catch (ResponseStatusException e) {            throw new ResponseStatusException(e.getStatusCode(), e.getReason());        }    }    @Override    public ResponseEntity<ResponseData<Subscription>> updateSubscription(String subscription_id, Subscription subscription) {        try {            Optional<Subscription> subscriptionOptional = subscriptionRepository.findById(subscription_id);            if(subscriptionOptional.isEmpty()){                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Subscription with ID: " + subscription_id + " not found");            }            subscriptionRepository.save(subscription);            return new ResponseEntity<>(new ResponseData<>(subscriptionOptional.get(), "Subscription updated successfully!"), HttpStatus.OK);        } catch (ResponseStatusException e) {            throw new ResponseStatusException(e.getStatusCode(), e.getReason());        }    }    @Override    public ResponseEntity<String> deleteSubscriptionById(String subscription_id) {        try {            Optional<Subscription> subscriptionOptional = subscriptionRepository.findById(subscription_id);            if(subscriptionOptional.isEmpty()){                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Subscription with ID: " + subscription_id + " not found");            }            subscriptionRepository.deleteById(subscription_id);            return new ResponseEntity<>("Deleted Subscription with ID " + subscription_id, HttpStatus.OK);        } catch (ResponseStatusException e) {            throw new ResponseStatusException(e.getStatusCode(), e.getReason());        }    }}